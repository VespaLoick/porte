//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/protagoniste/controle_carte.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controle_carte : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controle_carte()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""controle_carte"",
    ""maps"": [
        {
            ""name"": ""controlavatar"",
            ""id"": ""88698733-7f05-4c76-8c1e-21c068bab7ec"",
            ""actions"": [
                {
                    ""name"": ""marche"",
                    ""type"": ""Value"",
                    ""id"": ""a0af8b94-3321-4690-9a1b-80e6b0a4331b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""regarde"",
                    ""type"": ""Value"",
                    ""id"": ""5f6d06b0-50be-43a4-b423-f0679c2384d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""tire"",
                    ""type"": ""Button"",
                    ""id"": ""fdbba080-f30f-498c-8c70-75e8a2daaec5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""saut"",
                    ""type"": ""Button"",
                    ""id"": ""afcab9e3-3c23-4032-947e-b25a48ef6a62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""se_baisser"",
                    ""type"": ""Button"",
                    ""id"": ""260c56d1-7f51-4617-af3f-69e84396ed65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""attraper"",
                    ""type"": ""Button"",
                    ""id"": ""8ebb620f-51e2-4a46-b776-f8720727309c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""zqsd"",
                    ""id"": ""00ca640b-d935-4593-8157-c05846ea39b3"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""marche"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e2062cb9-1b15-46a2-838c-2f8d72a0bdd9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""marche"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""320bffee-a40b-4347-ac70-c210eb8bc73a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""marche"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d2581a9b-1d11-4566-b27d-b92aff5fabbc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""marche"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fcfe95b8-67b9-4526-84b5-5d0bc98d6400"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""marche"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8c8e490b-c610-4785-884f-f04217b23ca4"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Joystick"",
                    ""action"": ""regarde"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05f6913d-c316-48b2-a6bb-e225f14c7960"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Touch"",
                    ""action"": ""tire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8730ba2-b9e8-46bc-bcb4-2636ad977b46"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Touch"",
                    ""action"": ""tire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17e47c51-7d97-4133-87a2-87b0334d3082"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""saut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4495014a-5207-496d-9818-88c3f2692278"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""se_baisser"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7904869-912f-4277-b2f6-263f94948e28"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""attraper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // controlavatar
        m_controlavatar = asset.FindActionMap("controlavatar", throwIfNotFound: true);
        m_controlavatar_marche = m_controlavatar.FindAction("marche", throwIfNotFound: true);
        m_controlavatar_regarde = m_controlavatar.FindAction("regarde", throwIfNotFound: true);
        m_controlavatar_tire = m_controlavatar.FindAction("tire", throwIfNotFound: true);
        m_controlavatar_saut = m_controlavatar.FindAction("saut", throwIfNotFound: true);
        m_controlavatar_se_baisser = m_controlavatar.FindAction("se_baisser", throwIfNotFound: true);
        m_controlavatar_attraper = m_controlavatar.FindAction("attraper", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // controlavatar
    private readonly InputActionMap m_controlavatar;
    private IControlavatarActions m_ControlavatarActionsCallbackInterface;
    private readonly InputAction m_controlavatar_marche;
    private readonly InputAction m_controlavatar_regarde;
    private readonly InputAction m_controlavatar_tire;
    private readonly InputAction m_controlavatar_saut;
    private readonly InputAction m_controlavatar_se_baisser;
    private readonly InputAction m_controlavatar_attraper;
    public struct ControlavatarActions
    {
        private @Controle_carte m_Wrapper;
        public ControlavatarActions(@Controle_carte wrapper) { m_Wrapper = wrapper; }
        public InputAction @marche => m_Wrapper.m_controlavatar_marche;
        public InputAction @regarde => m_Wrapper.m_controlavatar_regarde;
        public InputAction @tire => m_Wrapper.m_controlavatar_tire;
        public InputAction @saut => m_Wrapper.m_controlavatar_saut;
        public InputAction @se_baisser => m_Wrapper.m_controlavatar_se_baisser;
        public InputAction @attraper => m_Wrapper.m_controlavatar_attraper;
        public InputActionMap Get() { return m_Wrapper.m_controlavatar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlavatarActions set) { return set.Get(); }
        public void SetCallbacks(IControlavatarActions instance)
        {
            if (m_Wrapper.m_ControlavatarActionsCallbackInterface != null)
            {
                @marche.started -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnMarche;
                @marche.performed -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnMarche;
                @marche.canceled -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnMarche;
                @regarde.started -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnRegarde;
                @regarde.performed -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnRegarde;
                @regarde.canceled -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnRegarde;
                @tire.started -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnTire;
                @tire.performed -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnTire;
                @tire.canceled -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnTire;
                @saut.started -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnSaut;
                @saut.performed -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnSaut;
                @saut.canceled -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnSaut;
                @se_baisser.started -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnSe_baisser;
                @se_baisser.performed -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnSe_baisser;
                @se_baisser.canceled -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnSe_baisser;
                @attraper.started -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnAttraper;
                @attraper.performed -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnAttraper;
                @attraper.canceled -= m_Wrapper.m_ControlavatarActionsCallbackInterface.OnAttraper;
            }
            m_Wrapper.m_ControlavatarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @marche.started += instance.OnMarche;
                @marche.performed += instance.OnMarche;
                @marche.canceled += instance.OnMarche;
                @regarde.started += instance.OnRegarde;
                @regarde.performed += instance.OnRegarde;
                @regarde.canceled += instance.OnRegarde;
                @tire.started += instance.OnTire;
                @tire.performed += instance.OnTire;
                @tire.canceled += instance.OnTire;
                @saut.started += instance.OnSaut;
                @saut.performed += instance.OnSaut;
                @saut.canceled += instance.OnSaut;
                @se_baisser.started += instance.OnSe_baisser;
                @se_baisser.performed += instance.OnSe_baisser;
                @se_baisser.canceled += instance.OnSe_baisser;
                @attraper.started += instance.OnAttraper;
                @attraper.performed += instance.OnAttraper;
                @attraper.canceled += instance.OnAttraper;
            }
        }
    }
    public ControlavatarActions @controlavatar => new ControlavatarActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IControlavatarActions
    {
        void OnMarche(InputAction.CallbackContext context);
        void OnRegarde(InputAction.CallbackContext context);
        void OnTire(InputAction.CallbackContext context);
        void OnSaut(InputAction.CallbackContext context);
        void OnSe_baisser(InputAction.CallbackContext context);
        void OnAttraper(InputAction.CallbackContext context);
    }
}
